1)

package main
import "fmt"
func main() {



var queue []string

queue = append(queue, "kloud ") 
queue = append(queue, "one")

for len(queue) > 0 {
    fmt.Print(queue[0]) 
    queue = queue[1:]   
}
}

kloud one
Program exited.


2)

package main
import "fmt"

func enqueue(queue[] int, element int) []int {
  queue = append(queue, element); 
  fmt.Println("Enqueued:", element);
  return queue
}

func dequeue(queue[] int) ([]int) {
  element := queue[0]; 
  fmt.Println("Dequeued:", element)
  return queue[1:]; 
}

func main() {
  var queue[] int; 

  queue = enqueue(queue, 10);
  queue = enqueue(queue, 20);
  queue = enqueue(queue, 30);

  fmt.Println("Queue:", queue);

  queue = dequeue(queue);
  fmt.Println("Queue:", queue);

  queue = enqueue(queue, 40);
  fmt.Println("Queue:", queue);
}


Enqueued: 10
Enqueued: 20
Enqueued: 30
Queue: [10 20 30]
Dequeued: 10
Queue: [20 30]
Enqueued: 40
Queue: [20 30 40]

Program exited.



3)


package main
import "container/list"
import "fmt"

func main() {
    
    queue := list.New()

    
    queue.PushBack(50)
    queue.PushBack(70)
    queue.PushBack(90)

    
    front:=queue.Front()
    fmt.Println(front.Value)
   
    queue.Remove(front)
}


50

Program exited.


4)

package main

import "fmt"

func main() {
    
    queue := make([]int, 0)

queue = append(queue, 1)


queue = queue[1:]

if len(queue) == 0 {
    fmt.Println("Queue is empty !")
}
}

Queue is empty !

Program exited.


5)

package main
  
import (
    "fmt"
)
  
type Node struct {
    Value int
}
  
func (n *Node) String() string {
    return fmt.Sprint(n.Value)
}
  

func NewStack() *Stack {
    return &Stack{}
}
  
type Stack struct {
    nodes []*Node
    count int
}
  

func (s *Stack) Push(n *Node) {
    s.nodes = append(s.nodes[:s.count], n)
    s.count++
}
  

func (s *Stack) Pop() *Node {
    if s.count == 0 {
        return nil
    }
    s.count--
    return s.nodes[s.count]
}
  

func NewQueue(size int) *Queue {
    return &Queue{
        nodes: make([]*Node, size),
        size:  size,
    }
}
  

type Queue struct {
    nodes []*Node
    size  int
    head  int
    tail  int
    count int
}
  

func (q *Queue) Push(n *Node) {
    if q.head == q.tail && q.count > 0 {
        nodes := make([]*Node, len(q.nodes)+q.size)
        copy(nodes, q.nodes[q.head:])
        copy(nodes[len(q.nodes)-q.head:], q.nodes[:q.head])
        q.head = 0
        q.tail = len(q.nodes)
        q.nodes = nodes
    }
    q.nodes[q.tail] = n
    q.tail = (q.tail + 1) % len(q.nodes)
    q.count++
}
  

func (q *Queue) Pop() *Node {
    if q.count == 0 {
        return nil
    }
    node := q.nodes[q.head]
    q.head = (q.head + 1) % len(q.nodes)
    q.count--
    return node
}
  
func main() {
    s := NewStack()
    s.Push(&Node{3})
    s.Push(&Node{5})
    s.Push(&Node{7})
    s.Push(&Node{9})
    fmt.Println(s.Pop(), s.Pop(), s.Pop(), s.Pop())
  
    q := NewQueue(1)
    q.Push(&Node{2})
    q.Push(&Node{4})
    q.Push(&Node{6})
    q.Push(&Node{8})
    fmt.Println(q.Pop(), q.Pop(), q.Pop(), q.Pop())
}


9 7 5 3
2 4 6 8

Program exited.